<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.lizhao.cloud</groupId>
		<artifactId>cloud</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath> <!-- lookup parent from repository -->
	</parent>
	<groupId>org.lizhao</groupId>
	<artifactId>authority</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>authority</name>
	<description>authority</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.lizhao.cloud</groupId>
			<artifactId>base</artifactId>
			<version>${cloud.version}</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<!--启用bootstrap 配置文件-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bootstrap</artifactId>
		</dependency>

		<!--cloud服务注册与发现中心 nacos-->
		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
		</dependency>
		<!--cloud服务注册与发现中心 nacos-->
		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-r2dbc</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!--响应式postgresql数据库-->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>r2dbc-postgresql</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}-${project.version}</finalName>
		<resources>
			<!--注意此处必须要配置 才能被访问到 图标  解决经过maven的filter，会破坏font文件的二进制文件格式，导致前台解析出错
                解决办法：替换资源文件参数时，先将 替换处理后会被破坏的文件排除，在之后再重新获取被排除的文件
            -->
			<resource>
				<directory>src/main/resources</directory>
				<!--使用maven属性替换资源文件中的参数-->
				<filtering>true</filtering>
				<!--资源文件打包到了父项目下。。。。-->
				<!--                <targetPath>${project.build.outputDirectory}</targetPath>-->
				<includes>
					<include>**/*.xml</include>
					<include>**/*.yml</include>
					<include>**/*.properties</include>
				</includes>
				<excludes>
					<exclude>plugins</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<includes>
					<include>plugins/**</include>
					<include>static/**</include>
					<include>templates/**</include>
				</includes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<!--使用maven属性替换测试资源文件中的参数-->
				<filtering>true</filtering>
				<!--                <targetPath>${project.build.testOutputDirectory}</targetPath>-->
				<includes>
					<include>**/*.yml</include>
					<include>**/*.properties</include>
				</includes>
			</testResource>
		</testResources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<!--                <version>3.10.1</version>-->
				<configuration>
					<compilerArgs>
						<arg>-parameters</arg>
					</compilerArgs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<!--Manifest 中 Start-Class，启动类-->
					<mainClass>org.lizhao.authority.AuthorityApplication</mainClass>
					<!--打包类型-->
					<layout>JAR</layout>
					<!--分类器，打包后文件后缀-->
					<classifier>spring-boot</classifier>
					<!--运行时是否包含测试路径-->
					<useTestClasspath>false</useTestClasspath>
					<!--根据groupId来排除依赖-->
					<excludeGroupIds>org.projectlombok</excludeGroupIds>
					<!--根据 groupId-artifactId-version 来排除依赖-->
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<!--                            <version></version>-->
						</exclude>
						<!--排除Tomcat启动配置包，使用undertow作为服务器中间件-->
						<exclude>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-starter-tomcat</artifactId>
						</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>repackage</id>
						<!--绑定当前repackage 到 构建生命周期 阶段 package, 当执行package时触发repackage-->
						<phase>package</phase>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<!--排除spring-boot-devtools-->
							<excludeDevtools>true</excludeDevtools>
							<layout>JAR</layout>
							<!--是否跳过该goal，也可使用mvn clean package -Dspring-boot.repackage.skip=true来跳过springboot的maven打包插件-->
							<skip>false</skip>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
